---
import moment from 'moment';
import Settings from '../layouts/Settings.astro';
import Layout from '../layouts/Layout.astro';
import ThemeModifier from '../components/ThemeModifier.astro';
import ThemeEditor from '../components/ThemeEditor.astro';
import ScreenSaver from '../components/ScreenSaver.astro';
import VoteForVP from '../components/VoteForVP.astro';

function replaceShorthands(period: string) {
	// replace period to Lunch if it's ONLY "L" with regex
	// also, using regex, replace the "Blk" shorthand to "Block" and switch the number and the word, "Block" with the number. For example, "4 Blk" would be "Block 4"
	return period.replace(/(\d) Blk/, "Block $1").replace(/^L$/, "Lunch")
}

function parseTime(t: string, offsetTime = new Date()) {
	let momentDate = moment(t, "h:mm A").toDate()
	if (momentDate.getHours() < 8) {
		momentDate.setHours(momentDate.getHours() + 12)
		
	}
	return momentDate
}
---

<Layout title="DynSchedule">
	<body>
		<div class="flex justify-start items-center flex-row" data-in-theme-editor>
			<ScreenSaver />
			<ThemeEditor />
			
			<div class="fixed opacity-0 bg-blue-500 text-white rounded-lg p-4 top-2 right-2 z-10 hidden justify-start items-center gap-4 h-12" id="refresh_notif" data-in-theme-editor>
				<span class="material-symbols-outlined">
					refresh
				</span>
				<div class="border-l-2 border-white w-1 h-4"></div>
				<h1 class="text-lg font-mono" data-in-theme-editor>Refreshed Schedule!</h1>
			</div>
			<div class="flex justify-center items-center w-screen h-screen gap-4 p-2 relative" id="schedule_page">
				<div id="throwback" class="absolute top-2 left-2 border-black invisible border-2 rounded-sm bg-primary pl-2 pr-2 text-sm">
					<h1>Originally by C.J.F '22, Rebuilt by Nat3z</h1>
				</div>
		
				<Settings />
				<div class="bg-primary w-11/12 transition-all h-5/6 rounded-lg flex-col flex-wrap justify-center drop-shadow-lg" id="main_schedule">
					
					<div class="w-full h-1/6 sm:h-1/4 flex justify-center items-center rounded-t-lg bg-light-primary transition-all" id="quickpeek">
						<h1 class="text-center text-white text-4xl md:text-6xl absolute z-10" id="current">Loading...</h1>
						<div class="w-full bg-transparent opacity-20 rounded-t-lg h-full">
							<div class="bg-blue-500 h-full rounded-t-lg rounded-tr-none" style="width: 0%" id="progressbar"></div>
						</div>
					</div>
	
					<div class="flex flex-col justify-center items-center p-4 text-lg" id="classes">
					</div>
				</div>
					
				<div class="hidden sm:block fixed bottom-4 transition-all" id="vercel">
					<div class="flex justify-center text-white items-center gap-2 m-auto">
						<!-- <img width="25" height="25" alt="Light mode" src="./sun.svg"/> -->
						Built by Nat3z, using <img alt="Astro" src="/astro-logo.png" width="75" height="24.7167" class="top-1 relative"> and hosted on <img alt="Vercel" height="16.9" src="/vercel-logo.png" width="75" class="top-0.5 relative">
						<!-- <b>VOTE NATHAN FOR SOPHOMORE VICE PRESIDENT!!!</b> -->
					</div>
				</div>
			</div>
			<!-- <VoteForVP /> -->
			<ThemeModifier />
		</div>
	</body>

	<script>
		import moment from 'moment';
		// remember to change this to the production url when you're done testing
		const url = "https://salesian-calendar-git-production-nat3z.vercel.app/"


		let scheduleData = await ((await fetch(`${url}?date=${moment().unix()}`)).json());
		// let scheduleData = await ((await fetch('http://localhost:3000/api/schedule')).json())
		let scheduleEvents = scheduleData.events;
		document.dispatchEvent(
			new CustomEvent("loadComplete", {
				bubbles: true,
				cancelable: true,
				composed: false,
			})
		);

		console.log("%cCreated by cool people at Salesian lololol!!!!!", "color: grey; text-shadow: 2px 2px white; font-size: 32px;")

		function replaceShorthands(period: string) {
			// replace period to Lunch if it's ONLY "L" with regex
			// also, using regex, replace the "Blk" shorthand to "Block" and switch the number and the word, "Block" with the number. For example, "4 Blk" would be "Block 4"
			return period.replace(/(\d) Blk/, "Block $1").replace(/^L$/, "Lunch").replace(/^Flextime$/, "Flex").replace(/Blk (\d)/, "Block $1")
		}

		function parseTime(t: string, offsetTime = new Date()) {
			let momentDate = moment(t, "h:mm A").toDate()
			if (momentDate.getHours() < 8) {
				momentDate.setHours(momentDate.getHours() + 12)
			}
			return momentDate
		}
		if ((!scheduleEvents || scheduleEvents.length === 0) && new Date().getHours() > 17) {
			let currentDate = new Date()
			currentDate.setDate(currentDate.getDate() + 1)

			scheduleData = await ((await fetch(`${url}?date=${Math.round(+currentDate / 1000)}`)).json())
			scheduleEvents = scheduleData.events
			console.log("Using tomorrow's schedule")
		}

		if (!scheduleEvents || scheduleEvents.length === 0) {
			document.getElementById("current")!.innerHTML = "Out of Session"
			document.getElementById("classes")!.innerHTML += `
				<h1 id="failed" class="text-center text-lg md:text-3xl">
					No classes today
				</h1>
			`
		}

		let mouseTimeout: number | undefined;

		function mouseMove() {
			clearTimeout(mouseTimeout)
			let quickpeek = document.getElementById("quickpeek")!
			let mainschedule = document.getElementById("main_schedule")!

			quickpeek.classList.remove("backdrop-blur")
			quickpeek.classList.remove("bg-white/0")

			mainschedule.classList.remove("backdrop-blur")
			mainschedule.classList.remove("dark:bg-white/5")
			mainschedule.classList.remove("bg-black/5")

			document.getElementById("settings_cog")!.classList.remove("backdrop-blur")
			document.getElementById("settings_cog")!.classList.remove("bg-white/5")

			document.body.classList.remove("bg-light")
			document.body.classList.remove("dark:bg-dark")
			document.getElementById("vercel")!.classList.remove("-bottom-8")

			document.body.classList.remove("bg-dark-primary")
			document.body.style.cursor = "auto"
			mouseTimeout = setTimeout(() => {
				let quickpeek = document.getElementById("quickpeek")!
				let mainschedule = document.getElementById("main_schedule")!

				quickpeek.classList.add("backdrop-blur")
				quickpeek.classList.add("bg-white/0")
				document.getElementById("settings_cog")!.classList.add("backdrop-blur")
				document.getElementById("settings_cog")!.classList.add("bg-white/5")

				mainschedule.classList.add("backdrop-blur")
				mainschedule.classList.add("dark:bg-white/5")
				mainschedule.classList.add("bg-black/5")

				document.body.classList.add("bg-light")
				document.getElementById("vercel")!.classList.add("-bottom-8")
				document.body.classList.add("dark:bg-dark")
			
				document.body.classList.remove("bg-dark-primary")
				document.body.style.cursor = "none"
			}, 5000);
		}

		if ((localStorage.getItem("dynamic_theme") === "true" || !localStorage.getItem("dynamic_theme")) && (localStorage.getItem("theme") === "default" || !localStorage.getItem("theme"))) {
			document.onmousemove = mouseMove
			mouseMove()
		}

		if (!scheduleData.possiblyClosed) localStorage.removeItem("alwaysShowSchedule")

		
		// for every second, use a loop and check the events unix time start and end. update the amount of minutes
		function updateSchedule(events: any) {
			// get the current time as milis and add the utcOffset to it and turn it into a unix timestamp
			let current = new Date()
			let now = moment(current.getTime()).unix()
			let success = false
			let closestStart = 0
			let lastEndedBlock = 0
			let hasClearedAllDocs = false
			if (!events) return
			Object.entries(events).map(([key, value]) => {
				let startTime = moment(parseTime(events[key].start, current)).unix()
				let endTime = moment(parseTime(events[key].end, current)).unix()
				let docKey = document.getElementById(key)
				if (!hasClearedAllDocs && !docKey) {
					hasClearedAllDocs = true
					document.getElementById("classes")!.innerHTML = `
					<h1 class="text-lg md:text-3xl font-bold text-center mb-4" id="title">${replaceShorthands(scheduleData.title)}</h1>
					`
					
				}

				if (!docKey) {
					// add to classes the current period
					let replace_shorthand = replaceShorthands(key)
					if (replace_shorthand.startsWith("Block ")) {
						let block_num = replace_shorthand.split(" ")[1]
						if (localStorage.getItem("blk_" + block_num)) {
							replace_shorthand = localStorage.getItem("blk_" + block_num)!
						}
					}
					document.getElementById("classes")!.innerHTML += `
						<h1 id="${key}" class="text-center text-ultramd md:text-3xl">
							${parseTime(events[key].start).toLocaleTimeString("en-us", { hour12: true, minute: '2-digit', hour: 'numeric' })} - ${parseTime(events[key].end).toLocaleTimeString("en-us", { hour12: true, minute: '2-digit', hour: 'numeric' })} ── ${replace_shorthand}
						</h1>
					`
				}

				if (now >= startTime && now <= endTime) {
					document.getElementById(key)!.classList.add("font-bold")					 
					const minutes = Math.ceil((endTime - now) / 60)
					let timeNowCountdown = moment().startOf('day').seconds(endTime - now).format('H:mm:ss')
					let replace_shorthand = replaceShorthands(key)
					if (replace_shorthand.startsWith("Block ")) {
						let block_num = replace_shorthand.split(" ")[1]
						if (localStorage.getItem("blk_" + block_num)) {
							replace_shorthand = localStorage.getItem("blk_" + block_num)!
						}
					}
					document.getElementById(key)!.textContent = `${parseTime(events[key].start).toLocaleTimeString("en-us", { hour12: true, minute: '2-digit', hour: 'numeric' })} - ${parseTime(events[key].end).toLocaleTimeString("en-us", { hour12: true, minute: '2-digit', hour: 'numeric' })} ─ ${timeNowCountdown} ─ ${replace_shorthand}`
					// get minutes between end and now time and update the #current element

					if (Math.ceil(minutes * 60) !== 0) {
						let text = ''
						// if the minutes is below 1, then instead of minutes, show seconds
						let replace_shorthand = replaceShorthands(key)
						if (replace_shorthand.startsWith("Block ")) {
							let block_num = replace_shorthand.split(" ")[1]
							if (localStorage.getItem("blk_" + block_num)) {
								replace_shorthand = localStorage.getItem("blk_" + block_num)!
							}
						}

						if (minutes <= 1) {
							text += `${replace_shorthand} (${Math.ceil((endTime - now))}")`
						} else {
							text += `${replace_shorthand} (${Math.ceil(minutes)}')`
						}
						// get the seconds between now and endtime and convert it into a percentage
						// then set the width of the progress bar to that percentage
						let percentage = (endTime - now) / (endTime - startTime) * 100
						document.getElementById("progressbar")!.style.width = `${percentage}%`

						document.getElementById("current")!.innerHTML = text
						if (!document.hasFocus()) {
							document.title = text
						}
						
						success = true
					}

				}
				else {
					document.getElementById(key)!.classList.remove("font-bold")
					let replace_shorthand = replaceShorthands(key)
					if (replace_shorthand.startsWith("Block ")) {
						let block_num = replace_shorthand.split(" ")[1]
						if (localStorage.getItem("blk_" + block_num)) {
							replace_shorthand = localStorage.getItem("blk_" + block_num)!
						}
					}
					document.getElementById(key)!.textContent = `${parseTime(events[key].start).toLocaleTimeString("en-us", { hour12: true, minute: '2-digit', hour: 'numeric' })} - ${parseTime(events[key].end).toLocaleTimeString("en-us", { hour12: true, minute: '2-digit', hour: 'numeric' })} ── ${replace_shorthand}`
				}

				if (startTime - now > 0 && (closestStart == 0 || startTime - now < closestStart)) {
					closestStart = startTime - now
				}
				if (endTime - now < 0 && (lastEndedBlock == 0 || endTime - now > lastEndedBlock)) {
					lastEndedBlock = endTime - now
				}
			})

			if (!success) {
				// if it is still before 3:00 and after 8, most likely just passing period.
				let text = ''
				let offset = 0
				// if it is 8:00 AM, and before 20 minutes, then it is NOT passing period and is instead the start of the day. 
				// Set offset to 10 to make the nearest event 10 minutes away from 8:30 AM, thus being the actual "Welcome Bell"
				if (current.getHours() === 8 && current.getMinutes() < 20) { text = "Welcome Bell"; offset = 10 }
				// if it is before 3:00 PM, and after or equal to 8:00 AM, then it is a passing period
				else if (closestStart != 0 && current.getHours() > 7) text = "Passing Period"
				// if not, then most likely just out of session
				else {
					let text = 'Out of Session'
					
					document.getElementById("current")!.innerHTML = text
					if (!document.hasFocus()) {
						document.title = text
					}
					document.getElementById("progressbar")!.style.width = `0%`
					success = true
				}

				if (!success) {
					// if the minutes is below 1, then instead of minutes, show seconds
				
					if (closestStart / 60 - offset < 1) {
						text += ` (${Math.ceil(closestStart) - (offset * 60)}")`
					} else {
						text += ` (${Math.ceil(closestStart / 60) - (offset)}')`
					}
					document.getElementById("current")!.innerHTML = text
					// percentage
					let percentage = (closestStart - offset * 60) / (closestStart - lastEndedBlock) * 100
					document.getElementById("progressbar")!.style.width = `${percentage}%`

					if (!document.hasFocus()) {
						document.title = text
					}	
				}

			}

			if (document.hasFocus()) document.title = `DynSchedule`
			if (scheduleData.possiblyClosed && !localStorage.getItem("alwaysShowSchedule")) {
				if (!document.hasFocus()) document.title = `Possibly Closed`
				document.getElementById("current")!.innerHTML = "No Classes Today"
				document.getElementById("classes")!.innerHTML = `
					<h1 id="failed" class="text-center text-lg w-3/4 md:text-3xl text-red-500 font-bold">
						School is most likely closed for the day. Please check the school's website for more information.
					</h1>
					<button class="p-2 pl-4 pr-4 bg-light-primary rounded-lg mt-4" id="revealschedule">Show Schedule Anyways (Spam Click)</button>
				`
				document.querySelector("#revealschedule")!.addEventListener("click", () => {
					localStorage.setItem("alwaysShowSchedule", "true");
				});
				document.getElementById("progressbar")!.style.width = `0%`;

				(document.querySelector("#showScreenSaver")! as HTMLElement).style.display = "flex !important"
			} else {
				(document.querySelector("#showScreenSaver")! as HTMLElement).style.display = "none !important"
			}
		}
		let currentScheduleInterval = setInterval(() => updateSchedule(scheduleEvents), 100)

		let timeSinceLastFocus = 0

		function animateNotif(text: string, element: HTMLElement) {
			element.style.display = "flex";
			element.animate([
				{ opacity: 0 },
				{ opacity: 1 }
			], {
				duration: 500,
				easing: "ease-in-out",
				fill: "forwards"
			});
			element.querySelector("h1")!.textContent = text;

			setTimeout(() => {
				element.animate([
					{ opacity: 1 },
					{ opacity: 0 }
				], {
					duration: 500,
					easing: "ease-in-out",
					iterations: 1,
					fill: "forwards"
				});
				setTimeout(() => {
					element.style.display = "none";
				}, 500);
			}, 4 * 1000);
		}
		setInterval(() => {
			if (!document.hasFocus() && timeSinceLastFocus == 0) {
				timeSinceLastFocus = moment().unix()
			}
			// page has focus
			// if the page has been unfocused for more than 30 minutes, refetch the schedule
			else if (document.hasFocus() && timeSinceLastFocus != 0 && moment().unix() - timeSinceLastFocus > 30 * 60) {
				timeSinceLastFocus = 0
				fetch(`${url}?date=${moment().unix()}`)
					.then(res => res.json())
					.then(async (data) => {
						scheduleData = data
						scheduleEvents = scheduleData.events

						if ((!scheduleEvents || scheduleEvents.length === 0) && new Date().getHours() > 17) {
							let currentDate = new Date()
							currentDate.setDate(currentDate.getDate() + 1)

							scheduleData = await ((await fetch(`${url}?date=${Math.round(+currentDate / 1000)}`)).json())
							scheduleEvents = scheduleData.events
							console.log("Using tomorrow's schedule")
						}

						if (!scheduleEvents || scheduleEvents.length === 0) {
							document.getElementById("current")!.innerHTML = "Out of Session"
							document.getElementById("classes")!.innerHTML += `
								<h1 id="failed" class="text-center text-lg md:text-3xl">
									No classes today
								</h1>
							`
						}

						animateNotif("Schedule Updated", document.querySelector("#refresh_notif")! as HTMLElement)
						clearInterval(currentScheduleInterval)
						currentScheduleInterval = setInterval(() => updateSchedule(scheduleEvents), 100)
						timeSinceLastFocus = 0
					})
			}
			else if (document.hasFocus() && timeSinceLastFocus != 0) {
				timeSinceLastFocus = 0
			}
		}, 1000);
	</script>

</Layout>

<style>
	@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Hind&family=Nunito+Sans&family=Open+Sans&family=PT+Serif&family=Raleway:wght@500&family=Varela+Round&display=swap');
	@tailwind base;
	@tailwind components;
	@tailwind utilities;

	body {
		background-size: cover;
		color: white;
		@apply bg-dark-primary transition-all h-screen;
	}
</style>
