---
import moment from 'moment';
import Layout from '../layouts/Layout.astro';

function replaceShorthands(period: string) {
	// replace period to Lunch if it's ONLY "L" with regex
	// also, using regex, replace the "Blk" shorthand to "Block" and switch the number and the word, "Block" with the number. For example, "4 Blk" would be "Block 4"
	return period.replace(/(\d) Blk/, "Block $1").replace(/^L$/, "Lunch")
}

function parseTime(t: string, offsetTime = new Date()) {
	let momentDate = moment(t, "h:mm A").toDate()
	if (momentDate.getHours() < 8) {
		momentDate.setHours(momentDate.getHours() + 12)
		
	}
	return momentDate
}
---

<Layout title="DynSchedule">
	<body>
		<div class="flex justify-center items-center w-screen h-screen">

			<div class="bg-primary w-11/12 h-5/6 rounded-lg flex-col flex-wrap justify-center">
				
				<div class="w-full h-1/4 flex justify-center items-center rounded-t-lg bg-light-primary">
					<h1 class="text-center text-white text-4xl md:text-6xl" id="current">Loading</h1>
				</div>

				<div class="flex flex-col justify-center items-center p-4" id="classes">
				</div>
			</div>
		</div>

		<div class="hidden sm:block fixed bottom-4 w-full">
			<div class="flex justify-center text-white items-center gap-2 m-auto">
				Powered by <img alt="Astro" src="/astro-logo.png" width="75" height="24.7167" class="top-1 relative"> hosted on <img alt="Vercel" height="16.9" src="/vercel-logo.png" width="75" class="top-0.5 relative"> and made by Nat3z
			</div>
		</div>
	</body>

	<script>
		import moment from 'moment'
		const scheduleData = await ((await fetch('https://api.schedule.nat3z.com/api/schedule')).json())
		const events = scheduleData.events

		function replaceShorthands(period: string) {
			// replace period to Lunch if it's ONLY "L" with regex
			// also, using regex, replace the "Blk" shorthand to "Block" and switch the number and the word, "Block" with the number. For example, "4 Blk" would be "Block 4"
			return period.replace(/(\d) Blk/, "Block $1").replace(/^L$/, "Lunch")
		}

		function parseTime(t: string, offsetTime = new Date()) {
			let momentDate = moment(t, "h:mm A").toDate()
			if (momentDate.getHours() < 8) {
				momentDate.setHours(momentDate.getHours() + 12)
			}
			return momentDate
		}
		
		// for every second, use a loop and check the events unix time start and end. update the amount of minutes
		setInterval(() => {
			// get the current time as milis and add the utcOffset to it and turn it into a unix timestamp
			let current = new Date()
			let now = moment(current.getTime()).unix()
			let success = false
			let closestStart = 0
			let hasClearedAllDocs = false
			if (!events) return
			Object.entries(events).map(([key, value]) => {
				let startTime = moment(parseTime(events[key].start, current)).unix()
				let endTime = moment(parseTime(events[key].end, current)).unix()
				let docKey = document.getElementById(key)
				if (!hasClearedAllDocs && !docKey) {
					hasClearedAllDocs = true
					document.getElementById("classes")!.innerHTML = `
					<h1 class="text-lg md:text-3xl font-bold text-white text-center mb-4" id="title">${replaceShorthands(scheduleData.title)}</h1>
					`
				}

				if (!docKey) {
					// add to classes the current period
					document.getElementById("classes")!.innerHTML += `
						<h1 id="${key}" class="text-white text-center text-lg md:text-3xl">
							${parseTime(events[key].start).toLocaleTimeString("en-us", { hour12: true, minute: '2-digit', hour: 'numeric' })} - ${parseTime(events[key].end).toLocaleTimeString("en-us", { hour12: true, minute: '2-digit', hour: 'numeric' })} ─── ${replaceShorthands(key)}
						</h1>
					`
				}

				if (now >= startTime && now <= endTime) {
					document.getElementById(key)!.classList.add("font-bold")
					// get minutes between end and now time and update the #current element
					const minutes = Math.ceil((endTime - now) / 60)
					if (Math.ceil(minutes * 60) !== 0) {
						let text = ''
						// if the minutes is below 1, then instead of minutes, show seconds
						if (endTime / 60 < 1) {
							text += `${replaceShorthands(key)} (${Math.ceil(minutes * 60)}")`
						} else {
							text += `${replaceShorthands(key)} (${Math.ceil(minutes)}')`
						}

						document.getElementById("current")!.innerHTML = text
						if (!document.hasFocus()) {
							document.title = text
						}
						
						success = true
					}

				}
				else {
					document.getElementById(key)!.classList.remove("font-bold")
				}

				if (startTime - now > 0 && (closestStart == 0 || startTime - now < closestStart)) {
					closestStart = startTime - now
				}
			})

			if (!success) {
				// if it is still before 3:00 and after 8, most likely just passing period.
				let text = ''
				let offset = 0
				// if it is 8:00 AM, and before 20 minutes, then it is NOT passing period and is instead the start of the day. 
				// Set offset to 10 to make the nearest event 10 minutes away from 8:30 AM, thus being the actual "Welcome Bell"
				if (current.getHours() === 8 && current.getMinutes() < 20) { text = "Welcome Bell"; offset = 10 }
				// if it is before 3:00 PM, and after or equal to 8:00 AM, then it is a passing period
				else if (current.getHours() < 15 && current.getHours() >= 8) text = "Passing Period"
				// if not, then most likely just out of session
				else {
					let text = 'Out of Session'
					
					document.getElementById("current")!.innerHTML = text
					if (!document.hasFocus()) {
						document.title = text
					}

					success = true
				}

				if (!success) {
					// if the minutes is below 1, then instead of minutes, show seconds
				
					if (closestStart / 60 - offset < 1) {
						text += ` (${Math.ceil(closestStart) - (offset * 60)}")`
					} else {
						text += ` (${Math.ceil(closestStart / 60) - (offset)}')`
					}
					document.getElementById("current")!.innerHTML = text
					if (!document.hasFocus()) {
						document.title = text
					}	
				}

			}

			if (document.hasFocus()) document.title = `DynSchedule`
		}, 100)
	</script>

</Layout>

<style>
	@tailwind base;
	@tailwind components;
	@tailwind utilities;

	body {
		@apply bg-dark-primary h-screen w-screen
	}
</style>