---
import ResetColor from "./ResetColor.astro";

---

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />

<div class="fixed opacity-0 bg-green-400 text-true-white rounded-lg p-4 top-2 right-2 z-40 hidden justify-start items-center gap-4 h-12 pointer-events-none" id="autosave_update" data-in-theme-editor>
  <span class="material-symbols-outlined">
    save
  </span>
  <div class="border-l-2 border-white w-1 h-4"></div>
  <h1 class="text-lg font-mono" data-in-theme-editor>Autosaved at </h1>
</div>

<div class="fixed opacity-0 bg-blue-400 text-true-white rounded-lg p-4 top-2 right-2 z-10 hidden justify-start items-center gap-4 h-12 pointer-events-none" id="share_notif" data-in-theme-editor>
  <span class="material-symbols-outlined">
    share
  </span>
  <div class="border-l-2 border-white w-1 h-4"></div>
  <h1 class="text-lg font-mono" data-in-theme-editor>Copied to Clipboard!</h1>
</div>

<div class="fixed opacity-0 bg-yellow-400 text-true-white rounded-lg p-4 top-2 right-2 pointer-events-none z-10 hidden justify-start items-center gap-4 h-12" id="warn_notif" data-in-theme-editor>
  <span class="material-symbols-outlined">
    warning
  </span>
  <div class="border-l-2 border-white w-1 h-4"></div>
  <h1 class="text-lg font-mono" data-in-theme-editor>Warning!</h1>
</div>


<div class="fixed rounded-none bottom-0 left-0 sm:bottom-0 sm:top-2 sm:left-2 bg-primary z-10 w-full h-24 sm:w-48 sm:h-48 sm:rounded-lg border border-black flex-col gap-2 justify-center items-center" style="display: none;" id="preview_menu" data-in-theme-editor>
  <h1 class="text-center text-xl">Previewing Theme</h1>
  <div class="flex flex-row flex-wrap justify-center items-center gap-2 pb-4">
    <button class="bg-light-primary p-2 pl-4 pr-4 rounded-lg" id="applyPreviewTheme">Apply</button>
    <button class="bg-light-primary p-2 pl-4 pr-4 rounded-lg" id="closePreviewTheme">Close</button>
  </div>
</div>
<div class="relative w-4/12 h-screen bg-gray-900 border-r-4 border-gray-800 text-true-white" style="display: none;" data-intro="Welcome to the Theme Editor ✏️" id="themeEditor">
  <div class="flex justify-start items-center pl-4 pr-4 mt-4">
    <h1 class="font-bold font-mono text-center text-xl" id="themeEditor-text">Theme Editor</h1>
    <button class="font-bold font-mono ml-auto text-gray-600 hover:text-red-400 text-xl justify-center items-center flex" id="closeEditor">
      <span class="material-symbols-outlined">
        close
      </span>
    </button>
  </div>

  <div class="w-full mt-4 flex items-center flex-col gap-4">
    <div class="flex flex-row justify-center items-center gap-2" data-intro="This is where you select your elements to theme">
      <button class="bg-gray-600 p-2 pr-4 pl-4 rounded-lg" id="eyedrop" data-intro="This is the eyedropper where you select which element you want to theme by clicking it in the preview window.">Select Element</button>
      <button class="bg-gray-600 p-2 pr-4 pl-4 rounded-lg flex justify-center items-center" id="manualeyedrop" data-intro="This is the manual input where you manually type in the id, class, or tag of the element to theme">
        <span class="material-symbols-outlined">
          keyboard
        </span>
      </button>
    </div>


    <div class="w-11/12 overflow-auto max-h-screen-3/4">
      <h1 class="font-mono text-lg text-gray-600 text-center">Elements</h1>
      <div class="flex justify-center items-center flex-col gap-4 w-full pb-4 mt-2" id="elements" data-intro="Under this area is the list of elements you are able to theme.">

        <div class="hidden w-full rounded-lg bg-gray-800 p-4" id="element-copy" data-element="abbr" data-in-theme-editor="">
          <div class="flex flex-row">
            <h1 class="font-mono bg-gray-700 p-1 w-fit" data-theme-type="tag-name">abbr</h1>
            <button class="font-mono ml-auto text-2xl text-gray-700 hover:text-red-500 font-extrabold">
              <span class="material-symbols-outlined">
                remove
              </span>
            </button>
          </div>

          <h1 class="font-mono text-gray-600 mt-2">Defined CSS</h1>
          <hr class="mt-2 mb-2 border-gray-700">
          <div class="flex flex-col gap-2" data-theme-type="defined-css-content">
            <div class="hidden justify-start gap-2 items-center flex-row flex-wrap" id="copy" data-element="abbr">
              <button class="font-mono text-gray-600 hover:text-red-400 font-bold flex items-center justify-center">
                <span class="material-symbols-outlined">
                  remove
                </span>
              </button>

              <select class="w-24 h-8 rounded-lg text-xs text-true-white pl-2 bg-gray-600">
                <option value="text-align">text-align</option>
                <option value="background-color">background-color</option>
                <option value="background-image">background-image</option>
                <option value="color">color</option>
                <option value="font-family">font-family</option>
                <option value="font-size">font-size</option>
                <option value="font-weight">font-weight</option>
                <option value="text-decoration">text-decoration</option>
                <option value="text-transform">text-transform</option>
                <option value="text-shadow">text-shadow</option>
                <option value="letter-spacing">letter-spacing</option>
                <option value="line-height">line-height</option>
                <option value="word-spacing">word-spacing</option>
                <option value="text-indent">text-indent</option>
                <option value="white-space">white-space</option>
                <option value="word-wrap">word-wrap</option>
                <option value="word-break">word-break</option>
                <option value="overflow-wrap">overflow-wrap</option>
                <option value="tab-size">tab-size</option>
                <option value="hyphens">hyphens</option>
                <option value="border">border</option>
                <option value="border-top">border-top</option>
                <option value="border-right">border-right</option>
                <option value="border-bottom">border-bottom</option>
                <option value="border-left">border-left</option>
                <option value="border-color">border-color</option>
                <option value="border-top-color">border-top-color</option>
                <option value="border-right-color">border-right-color</option>
                <option value="border-bottom-color">border-bottom-color</option>
                <option value="border-left-color">border-left-color</option>
                <option value="border-style">border-style</option>
                <option value="border-top-style">border-top-style</option>
                <option value="border-right-style">border-right-style</option>
                <option value="border-bottom-style">border-bottom-style</option>
                <option value="border-left-style">border-left-style</option>
                <option value="border-width">border-width</option>
                <option value="border-top-width">border-top-width</option>
                <option value="border-right-width">border-right-width</option>
                <option value="border-bottom-width">border-bottom-width</option>
                <option value="border-left-width">border-left-width</option>
                <option value="border-radius">border-radius</option>
                <option value="border-top-left-radius">border-top-left-radius</option>
                <option value="border-top-right-radius">border-top-right-radius</option>
                <option value="border-bottom-right-radius">border-bottom-right-radius</option>
                <option value="border-bottom-left-radius">border-bottom-left-radius</option>
                <option value="border-spacing">border-spacing</option>
                <option value="border-collapse">border-collapse</option>
                <option value="outline">outline</option>
                <option value="outline-width">outline-width</option>
                <option value="outline-style">outline-style</option>
                <option value="outline-color">outline-color</option>
                <option value="outline-offset">outline-offset</option>
                <option value="box-shadow">box-shadow</option>
                <option value="margin">margin</option>
                <option value="margin-top">margin-top</option>
                <option value="margin-right">margin-right</option>
                <option value="margin-bottom">margin-bottom</option>
                <option value="margin-left">margin-left</option>
                <option value="padding">padding</option>
                <option value="padding-top">padding-top</option>
                <option value="padding-right">padding-right</option>
                <option value="padding-bottom">padding-bottom</option>
                <option value="padding-left">padding-left</option>
                <option value="width">width</option>
                <option value="min-width">min-width</option>
                <option value="max-width">max-width</option>
                <option value="height">height</option>
                <option value="min-height">min-height</option>
                <option value="max-height">max-height</option>
                <option value="overflow">overflow</option>
                <option value="overflow-x">overflow-x</option>
                <option value="overflow-y">overflow-y</option>
                <option value="float">float</option>
                <option value="clear">clear</option>
                <option value="display">display</option>
                <option value="visibility">visibility</option>
                <option value="vertical-align">vertical-align</option>
                <option value="list-style">list-style</option>
                <option value="list-style-position">list-style-position</option>
                <option value="list-style-type">list-style-type</option>
                <option value="list-style-image">list-style-image</option>
                <option value="position">position</option>
                <option value="top">top</option>
                <option value="right">right</option>
                <option value="bottom">bottom</option>
                <option value="left">left</option>
                <option value="z-index">z-index</option>
                <option value="flex">flex</option>
                <option value="flex-grow">flex-grow</option>
                <option value="flex-shrink">flex-shrink</option>
                <option value="flex-basis">flex-basis</option>
                <option value="flex-direction">flex-direction</option>
                <option value="flex-wrap">flex-wrap</option>
                <option value="flex-flow">flex-flow</option>
                <option value="justify-content">justify-content</option>
                <option value="align-items">align-items</option>
                <option value="align-content">align-content</option>
                <option value="align-self">align-self</option>
              </select>

              <input class="w-14 h-8 rounded-lg text-black ml-auto" type="text" value="" />
            </div>
            <button class="font-mono text-gray-500 bg-gray-700 rounded-lg pl-2 pr-2 pt-1 pb-1 flex justify-center items-center" data-element="abbr" data-theme-type="add">
              <span class="material-symbols-outlined" data-theme-type="add">
                add
              </span>
            </button>
          </div>
        </div>



      </div>
      <h1 class="font-mono text-lg text-gray-600 text-center">Palette</h1>
      <div class="flex justify-start items-start flex-col gap-2 pl-2 pr-2" id="colorpalette" data-intro="This is the palatte which you can use to theme a general element of the stylesheet which will change across the entire site.">
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>light-primary</h1>
          <ResetColor />
          <input class="w-12 h-8 rounded-lg text-black" data-color-selection="light-primary" type="color" data-default="#1a0066" value="#1a0066" />
        </div>
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>primary</h1>
          <ResetColor />
          <input class="w-12 h-8 rounded-lg text-black" type="color" data-color-selection="primary" data-default="#0e003a" value="#0e003a"/>
        </div>
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>dark-primary</h1>
          <ResetColor /> 
          <input class="w-12 h-8 rounded-lg text-black" type="color" data-color-selection="dark-primary" data-default="#050014" value="#050014" />
        </div>
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>background</h1>
          <ResetColor />
          <button class="text-gray-600 hover:text-yellow-500 mr-2" data-switch-to-file>
            <span class="material-symbols-outlined">
              swap_horiz
            </span>
          </button>
          <input id="set_background" class="w-12 h-8 rounded-lg text-black" type="color" data-color-selection="background" data-default="#050014" value="#050014" />
          <label for="set_background" class="text-gray-600 hover:text-green-500 hover:cursor-pointer w-12 h-8 justify-center item-center flex" style="display: none;">
            <span class="material-symbols-outlined">
              file_upload
            </span>
          </label>
        </div>
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>text color</h1>
          <ResetColor />
          <input class="w-12 h-8 rounded-lg text-black" type="color" data-color-selection="text-color" data-default="#ffffff" value="#ffffff" />
        </div>
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>border width</h1>
          <ResetColor />
          <input class="w-12 h-8 rounded-lg text-black" type="number" data-color-selection="border-width" data-default="0" data-suffix="px" value="0" />
        </div>
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>border color</h1>
          <ResetColor />
          <input class="w-12 h-8 rounded-lg text-black" type="color" data-color-selection="border-color" data-default="#000000" value="#000000" />
        </div>
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>progress-bar color</h1>
          <ResetColor />
          <input class="w-12 h-8 rounded-lg text-black" type="color" data-color-selection="progress-bar" data-default="#3B82F6" value="#3B82F6" />
        </div>
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>progress-bar opacity</h1>
          <ResetColor />
          <input class="w-12 h-8 rounded-lg text-black" type="number" data-suffix="%" data-color-selection="progress-bar-opacity" data-default="20" value="20" />
        </div>
        <div class="flex w-full">
          <h1 class="font-mono text-lg text-true-white" data-color>countdown color</h1>
          <ResetColor />
          <input class="w-12 h-8 rounded-lg text-black" type="color" data-color-selection="quickpeek" data-default="#1a0066" value="#1a0066" />
        </div>
      </div>

      <h1 class="font-mono text-gray-600 text-center">Misc.</h1>
      <div class="flex justify-center items-center flex-row flex-wrap pl-4 pr-4 mt-2 gap-2 pb-24 text-sm">
        <button class="bg-gray-600 p-2 pr-4 pl-4 rounded-lg" id="shareTheme" data-intro="This is the 'Share Theme' button where you can share you theme with a link.">Share Theme</button>
        <button class="bg-gray-600 p-2 pr-4 pl-4 rounded-lg" id="showTutorial" data-intro="Click this button to view the tutorial again!">Show Tutorial</button>
      </div>
    </div>

  </div>

  <div class="absolute w-full h-12 bottom-0 border-t-4 flex justify-center items-center gap-2 flex-row flex-wrap border-gray-800 bg-gray-900">
    <button class="bg-gray-600 p-2 pr-4 pl-4 rounded-lg text-sm" id="saveEditor">Save</button>
    <button class="bg-gray-600 p-2 pr-4 pl-4 rounded-lg text-sm" id="resetEditor">Reset</button>
  </div>

  <div class="fixed" id="hint">

  </div>
</div>

<script>
  import introJs from "intro.js";
  import { blurredTheme } from "../lib/bigthemes";
  let themeSelected = localStorage.getItem("theme") || "default";
  const themeEditor = document.getElementById("themeEditor")!;
  const addPropertyEvent = new CustomEvent("addPropertyToThemeEditor");
  let firstRun = localStorage.getItem("firstRun") === null;
  let eyedropMode = false;
  async function updateColors() {
    const colorDefinitions = document.querySelectorAll("[data-color-selection]");
    if (document.getElementById("color-definitions")) {
      document.getElementById("color-definitions")!.remove();
    }

    const head = document.getElementsByTagName("head")[0];
    const style = document.createElement("style");
    style.id = "color-definitions";
    style.innerHTML += `:root {\n`
    for (const colorDefinitionRaw of colorDefinitions) {
      const colorDefinition = colorDefinitionRaw as HTMLInputElement;
      const color = colorDefinition.getAttribute("data-color-selection");
      const colorValue = colorDefinition.value;
      if (colorDefinition.type === "file") {
        await new Promise<void>((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = (event) => {
            style.innerHTML += `--${color}: url(${reader.result}) !important;\n`;
            resolve();
          }
          reader.readAsDataURL(colorDefinition.files![0]);
        });
      }
      else {
        style.innerHTML += `--${color}: ${colorValue}${colorDefinition.type === "number" ? colorDefinition.getAttribute("data-suffix")! : ""} !important;\n`;
      }
    }
    style.innerHTML += `\n}`;
    head.appendChild(style);
  }

  document.querySelectorAll("[data-color-selection]").forEach((colorDefinition) => {
    colorDefinition.addEventListener("change", (event) => {
      updateColors();
    });
  });

  function addPropertyToElement(element: HTMLElement, property: string = "", value: string = "") {
    let copyof = document.getElementById("copy")!.cloneNode(true) as HTMLElement;
    // check if element is already in theme editor
    copyof.classList.remove("hidden");
    copyof.id = "";
    copyof.classList.add("flex");
    async function updateCSS(elementExecute: HTMLElement = copyof) {
      if (!elementExecute.parentElement!.parentElement) return;
      let elementToAffect = elementExecute.parentElement!.parentElement!.getAttribute("data-element")!;
      let css = "";
      for (const item of elementExecute.parentElement!.children) {
        if (item.getAttribute("data-theme-type") === "add") continue;
        const cssRule = item.children[1] as HTMLSelectElement;
        const cssValue = item.children[2] as HTMLInputElement;
        if (!cssRule || !cssValue) return
        console.log(cssValue.type)
        if (cssValue.type === "file") {
          // encode image url
          let reader = new FileReader();
          await new Promise((resolve, reject) => {
            reader.onload = function (e) {
              css += cssRule.value + ": url(" + reader.result + ") !important;";
              resolve(e);
            };
            reader.readAsDataURL(cssValue.files![0]);
          })
          continue;
        }

        css += cssRule.value + ": " + cssValue.value + " !important;";
      }

      let cssElement = document.getElementById(elementToAffect.replace("#", "")!);

      if (!cssElement) {
        for (const element of document.querySelectorAll(elementToAffect)) {
          if (element.hasAttribute("data-in-theme-editor")) continue
          animatePulse(element as HTMLElement)
          element.setAttribute("style", css);
        }

        return 
      }
      animatePulse(cssElement);
      cssElement.setAttribute("style", css);

      updateColors();
    }

    copyof.children[0].addEventListener("click", (e) => {
      let cssElement = document.getElementById(copyof.parentElement!.parentElement!.getAttribute("data-element")!.replace("#", ""));
      if (!cssElement) {
        for (const element of document.querySelectorAll(copyof.parentElement!.parentElement!.getAttribute("data-element")!)) {
          if (element.hasAttribute("data-in-theme-editor")) continue
          element.setAttribute("style", "");
          animatePulse(element as HTMLElement);
          updateCSS(element as HTMLElement);
        }
      }
      let elementToExecuteClear: HTMLElement | null = null;
      if (copyof.parentElement!.children.length > 1) {
        elementToExecuteClear = copyof.parentElement!.children[1] as HTMLElement;
      }
      copyof.parentElement!.removeChild(copyof);
      
      // remove the css from the element
      if (elementToExecuteClear) {
        updateCSS(elementToExecuteClear);
      }
      else if (cssElement) {
        updateCSS(cssElement);
        animatePulse(cssElement);
      }

    });
    function fixInputType(target: HTMLElement) {
      if (target && (target as HTMLSelectElement).value != (copyof.children[2]! as HTMLInputElement).value) {
        if (target && (target as HTMLSelectElement).value.includes("color")) {
          copyof.children[2].setAttribute("type", "color");
        }
        else if (target && (target as HTMLSelectElement).value.includes("image")) {
          copyof.children[2].setAttribute("type", "file");
        }
        else
          copyof.children[2].setAttribute("type", "text");
        return;
      }
    }
    copyof.addEventListener("change", (e) => {
      e.stopPropagation();

      fixInputType(e.target as HTMLElement);
      updateCSS()
    });

    let dropdownCSS = copyof.children[1] as HTMLSelectElement;
    if (property) {
      dropdownCSS.value = property;
    }
    let inputCSS = copyof.children[2] as HTMLInputElement;
    if (value) {
      inputCSS.value = value;
    }
    fixInputType(dropdownCSS as HTMLElement);
    
    element.parentElement!.appendChild(copyof);
  }

  function animatePulse(element: HTMLElement) {
    element.animate([
      { outline: "none" },
      { outline: "1px solid yellow" },
      { outline: "2px solid yellow" },
      { outline: "3px solid yellow" },
      { outline: "4px solid yellow" },
      { outline: "6px solid yellow" },
      { outline: "4px solid yellow" },
      { outline: "3px solid yellow" },
      { outline: "2px solid yellow" },
      { outline: "1px solid yellow" },
      { outline: "none" },
    ], {
      duration: 500,
      iterations: 1
    });
  }
  function enableEyedrop() {
    eyedropMode = !eyedropMode

    if (eyedropMode) {
      document.getElementById("eyedrop")!.innerHTML = "Cancel";
    } else {
      document.getElementById("eyedrop")!.innerHTML = "Select Element";
    }
  }

  const elementsList = document.getElementById("elements")!;
  function addElementToEditor(tag: string) {
    let copyof = document.getElementById("element-copy")!.cloneNode(true) as HTMLElement;
    copyof.id = "themedef-" + tag;
    copyof.classList.remove("hidden");
    copyof.children[0].children[1].addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      elementsList.removeChild(copyof);
      let cssElement = document.getElementById(tag.replace("#", ""));
      if (!cssElement) {
        for (const element of document.querySelectorAll(tag)) {
          if (element.hasAttribute("data-in-theme-editor")) continue
          element.setAttribute("style", "");
          animatePulse(element as HTMLElement);
        }
        return
      }
      cssElement.setAttribute("style", "");
      animatePulse(cssElement);
    });
    copyof.children[0].children[0].innerHTML = tag;

    function setDataElementToChildren(initialTag: string, child: HTMLElement) {
      if (child.hasAttribute("data-element")) {
        child.setAttribute("data-element", initialTag);
      }
      for (let i = 0; i < child.children.length; i++) {
        setDataElementToChildren(initialTag, child.children[i] as HTMLElement);
      }
    }
    setDataElementToChildren(tag, copyof);

    elementsList.appendChild(copyof);
  }
  document.addEventListener("click", (e) => {
    if (!e.target || !eyedropMode) return
    let element = e.target as HTMLElement;
    e.preventDefault();
    if (element.id === "eyedrop") {
      element.style.outline = "none";
      return;
    }
    enableEyedrop();
    element.style.outline = "";
    let tag = (element.id ? "#" + element.id :  element.tagName.toLowerCase())

    if (document.getElementById("themedef-" + tag)) {
      // jump to the element
      document.getElementById("themedef-" + (element.id ? "#" + element.id :  element.tagName.toLowerCase()))!.scrollIntoView();

      // then do a little animation to show that it's selected using dom
      animatePulse(document.getElementById("themedef-" + (element.id ? "#" + element.id :  element.tagName.toLowerCase()))!)
      return;
    }
    addElementToEditor(tag);
    
  });

  document.querySelector("#manualeyedrop")!.addEventListener("click", (e) => {
    e.preventDefault();
    let tag = prompt("Enter the element's tag/classname/id you want to select (Ensure that you include the symbol (#, ., or none))");
    if (!tag) return;
    if (document.getElementById("themedef-" + tag)) {
      // jump to the element
      document.getElementById("themedef-" + tag)!.scrollIntoView();

      // then do a little animation to show that it's selected using dom
      animatePulse(document.getElementById("themedef-" + tag)!)
      return;
    }
    if (!tag.includes("#"))
      animateNotif("Please be careful when using greedy selectors.", document.getElementById("warn_notif")!);
    addElementToEditor(tag);
  });

  document.addEventListener("click", (e) => {
    if (!e.target) return
    let element = e.target as HTMLElement;
    if (element.getAttribute("data-theme-type") === "add") {
      // check if the element is a span, and if so, get the parent
      if (element.tagName.toLowerCase() === "span") {
        element = element.parentElement! as HTMLElement;
      }
      addPropertyToElement(element);
    }
    element.style.outline = "none";
  });
  
  let hoverTimeouts: number[] = []
  // on hover element put an outline around it
  document.addEventListener("mouseover", (e) => {
    if (!e.target || !eyedropMode) return
    
    let element = e.target as HTMLElement;
    if (element.hasAttribute("data-in-theme-editor")) return;
    element.style.outline = "6px solid red";
  });
  // on mouse out remove the outline
  document.addEventListener("mouseout", (e) => {
    if (!e.target || !eyedropMode) return
    let element = e.target as HTMLElement;
    if (element.hasAttribute("data-in-theme-editor")) return;
    element.style.outline = "none";
  });
  document.getElementById("eyedrop")!.addEventListener("click", () => {
    setTimeout(() => {
      enableEyedrop()
    }, 100);
  });

  async function saveProgress() {
    let elements = document.getElementById("elements")!.children;
    let data: { elements: { element: string, css: {rule: string, value: string}[] }[], colors: { name: string, value: string }[] } = { elements: [], colors: [] };
    for (let htmlelement of elements) {
      let element = htmlelement.querySelector("[data-theme-type=defined-css-content]")! as HTMLElement;
      let cssArray: { rule: string, value: string }[] = [];
      for (let tag of element.children) {
        let cssToPush: { rule: string, value: string }[] = [];
        if (tag.getAttribute("data-theme-type") === "add") continue;
        let cssRule = tag.children[1] as HTMLSelectElement;
        let cssValue = tag.children[2] as HTMLInputElement;
        if (!cssRule || !cssValue) continue;
        if (cssValue.type === "file") {
          let reader = new FileReader();
          await new Promise((resolve, reject) => {
            reader.onload = function (e) {
              // convert image file to base64 string and save to localStorage
             cssToPush.push({
                rule: cssRule.value,
                value: `url(${reader.result as string})`
              });
              resolve(e);
              cssArray.push(...cssToPush);
            };
            reader.readAsDataURL(cssValue.files![0]);
          })
        } else {
          cssToPush.push({
            rule: cssRule.value,
            value: cssValue.value
          });
          cssArray.push(...cssToPush);
        }
        

      }
      data.elements.push({
        element: htmlelement.getAttribute("data-element")!,
        css: cssArray
      });
    }
    let colors = document.getElementById("colorpalette")!.children;
    for (let color of colors) {
      let colorValue = color.querySelector("input")!!;
      if (!colorValue) continue;

      if (colorValue.type === "file") {
        let reader = new FileReader();
        await new Promise((resolve, reject) => {
          reader.onload = function (e) {
            // convert image file to base64 string and save to localStorage
            data.colors.push({
              name: colorValue.getAttribute("data-color-selection")!,
              value: `url(${reader.result as string})`
            });
            resolve(e);
          };
          reader.readAsDataURL(colorValue.files![0]);
        })
      } else 
        data.colors.push({
          name: colorValue.getAttribute("data-color-selection")!,
          value: colorValue.value + (colorValue.type === "number" ? colorValue.getAttribute("data-suffix") : "")
        });
    }
    localStorage.setItem(`savedEditor.${themeSelected}`, JSON.stringify(data));
    console.log("Saved at " + new Date().toLocaleTimeString());
  }

  function animateNotif(text: string, element: HTMLElement) {
    element.style.display = "flex";
    element.animate([
      { opacity: 0 },
      { opacity: 1 }
    ], {
      duration: 500,
      easing: "ease-in-out",
      fill: "forwards"
    });
    element.querySelector("h1")!.textContent = text;

    setTimeout(() => {
      element.animate([
        { opacity: 1 },
        { opacity: 0 }
      ], {
        duration: 500,
        easing: "ease-in-out",
        iterations: 1,
        fill: "forwards"
      });
      setTimeout(() => {
        element.style.display = "none";
      }, 500);
    }, 4 * 1000);
  }

  function triggerSave(isAnAutosave: boolean = false) {
    if (themeEditor.style.display === "none") return;
    saveProgress();
    let autosave = document.querySelector("#autosave_update")! as HTMLDivElement;
    animateNotif(
      (isAnAutosave ? "Auto-Saved" : "Saved") + " at " + new Date().toLocaleTimeString("en-US", { hour12: true, hour: "numeric", minute: "numeric" }),
      autosave
    );
  }

  setInterval(() => {
    triggerSave(true);
  }, 60 * 1000);

  document.getElementById("saveEditor")!.addEventListener("click", () => {
    triggerSave();
  });

  function loadFromSaved(saveData: any = null, forceCSS: boolean = false) {
    let savedData = saveData || localStorage.getItem(`savedEditor.${themeSelected}`);
    // split by the :root { } and the rest of the css
    if (document.getElementById("color-definitions")) {
      document.getElementById("color-definitions")!.remove();
    }

    // for each of the color definitions, revert them to the default color palette
    for (let childPalette of document.querySelector("#colorpalette")!.children) {
      const colorDefinition = childPalette.children[2] as HTMLInputElement;
      let color = colorDefinition.getAttribute("data-color-selection")!;
      let colorValue = colorDefinition.getAttribute("data-default")!;
      colorDefinition.value = colorValue;
    }
    let elementCopy = document.getElementById("element-copy")!.cloneNode(true) as HTMLElement;
    document.getElementById("elements")!.innerHTML = "";
    document.getElementById("elements")!.appendChild(elementCopy);
 

    if (!savedData) return;
    console.log("Loading Saved Theme...")
    // clear all existing info inside of the theme editor
   let data = JSON.parse(savedData);
    for (let element of data.elements) {
      let elementToAffect = document.getElementById(element.element.replace("#", ""));
      let css = "";
      for (const cssRule of element.css) {
        css += cssRule.rule + ": " + cssRule.value + ";";
      }
      if (!elementToAffect) {
        for (const elementSelected of document.querySelectorAll(element.element)) {
          if (elementSelected.hasAttribute("data-in-theme-editor")) continue
          elementSelected.setAttribute("style", css);
        }
        continue;
      }
      if (!elementToAffect) continue;
      elementToAffect.setAttribute("style", css);
    }
    const head = document.getElementsByTagName("head")[0];
    const style = document.createElement("style");

    style.id = "color-definitions";
    style.innerHTML += `:root {\n`;
    for (let color of data.colors) {
      style.innerHTML += `--${color.name}: ${color.value} !important;\n`;
    }
    style.innerHTML += `\n}`;

    head.appendChild(style);

    // apply saved colors to color palette
    let colors = document.getElementById("colorpalette")!.children;
    for (let color of colors) {
      let colorName = color.children[0] as HTMLHeadingElement;
      let colorValue = color.querySelector("input")!!;
      if (!colorName || !colorValue) continue;
      for (let savedColor of data.colors) {
        if (savedColor.name === colorValue.getAttribute("data-color-selection")!) {
          colorValue.value = savedColor.value.replace(colorValue.getAttribute("data-suffix")!, "");
          if (savedColor.value.startsWith("url(")) {
            colorValue.type = "file";
            colorValue.style.display = "none";
            color.querySelector("label")!!.style.display = "flex";
          }
          break;
        }
      }
    }
    for (const elementCSSData of data.elements) {
      if (elementCSSData.element === "abbr") continue;
      // for each element, get the corresponding element in the dom, then fire the 'click' event in the dom to add it
      addElementToEditor(elementCSSData.element);
      // then get the element in the editor and add the css rules to it
      let elementInEditor = document.getElementById("themedef-" + elementCSSData.element);
      let placeholderAlreadyProcessed = false;
      for (const cssRule of elementCSSData.css) {
        addPropertyToElement(elementInEditor!.children[3].children[0]! as HTMLElement, cssRule.rule, cssRule.value);
      }
    }

    console.log("Theme Applied!")
  }
  let isPreviewing = false;
  // Theme Sharing!
  let params = new URLSearchParams(window.location.search);

  const interval = setInterval(() => {
    if (document.getElementById("classes")!.children.length > 0) {
      clearInterval(interval);
      // theme previews
      if (params.get("theme")) {
        let theme = params.get("theme");
        isPreviewing = true;
        
        loadFromSaved(atob(theme!));
        (document.querySelector("#preview_menu")! as HTMLElement).style.display = "flex";
      }
      loadSelectedTheme();
    }
  }, 100);

  function loadSelectedTheme() {
    document.getElementById("throwback")!!.style.visibility = "hidden";
    document.getElementById("vercel")!!.style.visibility = "visible";
    if (!isPreviewing) {
      if (window.location !== window.parent.location) {
        return;
      }
      let doesCurrentThemeHaveEdits = localStorage.getItem(`savedEditor.${themeSelected}`) !== null;
      const purpleTheme = '{"elements":[{"element":"abbr","css":[{"rule":"text-align","value":""}]},{"element":"#vercel","css":[{"rule":"text-align","value":""},{"rule":"visibility","value":"hidden"}]}],"colors":[{"name":"light-primary","value":"#ffe4f2"},{"name":"primary","value":"#e0b8da"},{"name":"dark-primary","value":"#e68bbe"},{"name":"background","value":"#a570be"},{"name":"text-color","value":"#000000"},{"name":"border-width","value":"1px"},{"name":"border-color","value":"#000000"},{"name":"progress-bar","value":"#c533d0"},{"name":"progress-bar-opacity","value":"20%"},{"name":"quickpeek","value":"#ffe4f2"}]}' 
      const salesianTheme = '{"elements":[{"element":"abbr","css":[{"rule":"text-align","value":""}]},{"element":"#vercel","css":[{"rule":"text-align","value":""},{"rule":"visibility","value":"hidden"}]},{"element":"#throwback","css":[{"rule":"text-align","value":""},{"rule":"visibility","value":"visible"}]}],"colors":[{"name":"light-primary","value":"#baab90"},{"name":"primary","value":"#eddab8"},{"name":"dark-primary","value":"#cc1e38"},{"name":"background","value":"#a5192e"},{"name":"text-color","value":"#000000"},{"name":"border-width","value":"2px"},{"name":"border-color","value":"#000000"},{"name":"progress-bar","value":"#000000"},{"name":"progress-bar-opacity","value":"20%"},{"name":"quickpeek","value":"#eddab8"}]}'
      const hotdogTheme = '{"elements":[{"element":"abbr","css":[{"rule":"text-align","value":""}]},{"element":"#vercel","css":[{"rule":"text-align","value":""},{"rule":"visibility","value":"hidden"}]}],"colors":[{"name":"light-primary","value":"#ff0000"},{"name":"primary","value":"#fbff00"},{"name":"dark-primary","value":"#050014"},{"name":"background","value":"#ffff00"},{"name":"text-color","value":"#000000"},{"name":"border-width","value":"2px"},{"name":"border-color","value":"#000000"},{"name":"progress-bar","value":"#000000"},{"name":"progress-bar-opacity","value":"20%"},{"name":"quickpeek","value":"#ff0000"}]}'
      const greenTheme = '{"elements":[{"element":"abbr","css":[{"rule":"text-align","value":""}]},{"element":"#vercel","css":[{"rule":"text-align","value":""},{"rule":"visibility","value":"hidden"}]}],"colors":[{"name":"light-primary","value":"#b2d977"},{"name":"primary","value":"#bdf9a4"},{"name":"dark-primary","value":"#ffffff"},{"name":"background","value":"#77bb41"},{"name":"text-color","value":"#426222"},{"name":"border-width","value":"2px"},{"name":"border-color","value":"#4a963a"},{"name":"progress-bar","value":"#d9e9cb"},{"name":"progress-bar-opacity","value":"55%"},{"name":"quickpeek","value":"#b3de8f"}]}'

      if (themeSelected === "salesian" && !doesCurrentThemeHaveEdits) {
        loadFromSaved(salesianTheme);
      }
      else if (themeSelected === "green" && !doesCurrentThemeHaveEdits) {
        loadFromSaved(greenTheme);
      }
      else if (themeSelected === "purple" && !doesCurrentThemeHaveEdits) {
        loadFromSaved(purpleTheme);
      }
      else if (themeSelected === "hotdog" && !doesCurrentThemeHaveEdits) {
        loadFromSaved(hotdogTheme);
      }
      else if (themeSelected === "blurred-img" && !doesCurrentThemeHaveEdits) {
        loadFromSaved(blurredTheme);
      }
      else {
        loadFromSaved();
      }
    }
  }
  document.getElementById("closeEditor")!.addEventListener("click", () => {
    themeEditor.animate([
      { transform: "translateX(0)" },
      { transform: "translateX(-100%)" }
    ], {
      duration: 500,
      easing: "ease-in-out",
      fill: "forwards"
    });
    // animate the schedule page so that it moves with the close editor animation to fill the space where the editor was using marginLeft
    document.getElementById("schedule_page")!!.animate([
      { marginLeft: "0" },
      { marginLeft: "-33.33%" }
    ], {
      duration: 500,
      easing: "ease-in-out",
      fill: "forwards"
    });

    setTimeout(() => {
      document.getElementById("schedule_page")!!.animate([
        { marginLeft: "-33.33%" },
        { marginLeft: "0" }
      ], {
        duration: 0,
        fill: "forwards"
      });

      themeEditor.style.display = "none";
    }, 490);
  });

  document.getElementById("resetEditor")!.addEventListener("click", () => {
    let confirmation = confirm("Are you sure you want to reset this theme? You cannot undo this action.");
    if (!confirmation) return;
    localStorage.removeItem(`savedEditor.${themeSelected}`);
    location.reload();
  });

  document.querySelectorAll('[data-reset-colors]').forEach((element) => {
    element.addEventListener("click", () => {
      let colorInput = element.parentElement!.querySelector("input")!!;
      colorInput.value = colorInput.getAttribute("data-default")!;
      updateColors();
    });
  });

  document.querySelectorAll('[data-switch-to-file]').forEach((element) => {
    element.addEventListener("click", () => {
      let fileInput = element.parentElement!.querySelector("input")!!;
      const label = element.parentElement!.querySelector("label")!!;
      if (fileInput.type === "color") {
        label.style.display = 'flex';
        fileInput.style.display = 'none';
        fileInput.type = "file";
      }
      else if (fileInput.type === "file") {
        label.style.display = 'none';
        fileInput.style.display = 'block'; 
        fileInput.type = "color"; 
      } 
    })
  })
  
  themeEditor.style.display = "none";
  // prevent theme editor from being themed
  function addThemeEditorTag(element: HTMLElement) {
    element.setAttribute("data-in-theme-editor", "")
    for (const child of element.children) {
      addThemeEditorTag(child as HTMLElement);
    }
  }
  addThemeEditorTag(themeEditor);


  document.getElementById("closePreviewTheme")!.addEventListener("click", () => {
    window.open(window.location.origin, '_self')!;
  });
  
  document.getElementById("applyPreviewTheme")!.addEventListener("click", () => {
    if (!params.get("theme")) return;
    let theme = params.get("theme")!;
    const confirm = window.confirm("Are you sure you want to apply this theme? This will overwrite your current theme.");
    if (confirm) {
      localStorage.setItem(`savedEditor.${themeSelected}`, atob(theme));
      window.open(window.location.origin, '_self')!;
    }

  });

  document.getElementById("shareTheme")!.addEventListener("click", () => {
    saveProgress();
    let themeData = localStorage.getItem(`savedEditor.${themeSelected}`);
    if (!themeData) return;
    let url = new URL(window.location.href);
    url.searchParams.set("theme", btoa(themeData));
    navigator.clipboard.writeText(url.toString());
    animateNotif("Theme URL Copied to Clipboard!", document.getElementById("share_notif")!);
  });

  document.getElementById("showTutorial")!.addEventListener("click", () => {
    introJs().start()
  });
  let onCooldwn = false;
  document.addEventListener("keydown", (ev) => {
    if (ev.key === "Tab") {
      ev.preventDefault();
      if (onCooldwn) return;
      if ((document.querySelector("#preview_menu")! as HTMLElement).style.display !== "none") {
        return;
      }

      const themeEditor = document.getElementById("themeEditor")!;
      onCooldwn = true
      setTimeout(() => {
        onCooldwn = false;
      }, 500);
      if (themeEditor.style.display === "block") {
        themeEditor.animate([
          { transform: "translateX(0)" },
          { transform: "translateX(-100%)" }
        ], {
          duration: 500,
          easing: "ease-in-out",
          fill: "forwards"
        });
        // animate the schedule page so that it moves with the close editor animation to fill the space where the editor was using marginLeft
        document.getElementById("schedule_page")!!.animate([
          { marginLeft: "0" },
          { marginLeft: "-33.33%" }
        ], {
          duration: 500,
          easing: "ease-in-out",
          fill: "forwards"
        });

        setTimeout(() => {
          document.getElementById("schedule_page")!!.animate([
            { marginLeft: "-33.33%" },
            { marginLeft: "0" }
          ], {
            duration: 0,
            fill: "forwards"
          });
          
          themeEditor.style.display = "none";
        }, 490);

        return;
      }
      themeEditor.style.display = "block";
      themeEditor.animate([
        { transform: "translateX(-100%)" },
        { transform: "translateX(0)" }
      ], {
        duration: 500,
        easing: "ease-in-out",
        fill: "forwards"
      });

      document.getElementById("schedule_page")!!.animate([
        { marginLeft: "-33.33%" },
        { marginLeft: "0" }
      ], {
        duration: 500,
        easing: "ease-in-out",
        fill: "forwards"
      });
      
      setTimeout(() => {
        themeEditor.style.display = "block";
        document.getElementById("schedule_page")!!.animate([
          { marginLeft: "0" }
        ], {
          duration: 0,
          fill: "forwards"
        });
      }, 500);
    }
  })
  
  if (firstRun) {
    let frun = setInterval(() => {
      // check if theme editor is open
      if (themeEditor.style.display === "block") {
        clearInterval(frun);
        setTimeout(() => {
          localStorage.setItem("firstRun", "false")
          document.getElementById("showTutorial")!.click();
        }, 500);
      }

    }, 250);
  }

  // block the user from leaving the page if they have unsaved changes
  window.addEventListener("beforeunload", (e) => {
    if (localStorage.getItem(`savedEditor.${themeSelected}`) !== null) {
      // save the theme
      saveProgress();
    }
  });

  // create a custom dom event called "refresh theme" and make an event listener that triggers the loadFromSaved function
  document.addEventListener("refreshTheme", async (ev) => {
    // get the detail of the event to see if we should allow refresh
    let detail = (ev as CustomEvent).detail || { disallowRefresh: false };
    const allowsRefresh = detail.disallowRefresh != null ? !detail.disallowRefresh : true;
    console.log("Theme refresh caught!")
    themeSelected = localStorage.getItem("theme") || "default";

    if (allowsRefresh && themeSelected === "blurred-img") {
      window.location.reload();
    }
    loadSelectedTheme();
  });
</script>
