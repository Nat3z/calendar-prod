---
import AccountManagement from "../components/AccountManagement.astro";
---

<button
  class="absolute top-2 right-2 p-2 bg-primary rounded-lg w-12 h-12 text-white border-custom border-custom-color"
  id="settings_cog"
>
  <img src="/settings.svg" alt="‚öôÔ∏è" class="w-full h-full" id="cog_svg" />
</button>

<div
  class="bg-primary flex hidden w-11/12 sm:w-2/3 h-fit rounded-lg transition-all p-6 pt-4 sm:pt-10 sm:p-12 gap-4 flex-col border-custom border-custom-color"
  id="settings"
>
  <section
    class="text-white text-lg font-bold flex flex-row flex-wrap justify-center items-center gap-2 sm:gap-4"
    id="blk_1-input"
  >
    <h1>Block 1</h1>
    <input class="w-36 text-black font-normal pl-2" />
  </section>
  <section
    class="text-white text-lg font-bold flex flex-row flex-wrap justify-center items-center gap-2 sm:gap-4"
    id="blk_2-input"
  >
    <h1>Block 2</h1>
    <input class="w-36 text-black font-normal pl-2" />
  </section>
  <section
    class="text-white text-lg font-bold flex flex-row flex-wrap justify-center items-center gap-2 sm:gap-4"
    id="blk_3-input"
  >
    <h1>Block 3</h1>
    <input class="w-36 text-black font-normal pl-2" />
  </section>
  <section
    class="text-white text-lg font-bold flex flex-row flex-wrap justify-center items-center gap-2 sm:gap-4"
    id="blk_4-input"
  >
    <h1>Block 4</h1>
    <input class="w-36 text-black font-normal pl-2" />
  </section>
  <section
    class="text-white text-lg font-bold flex flex-row flex-wrap justify-center items-center gap-2 sm:gap-4"
    id="blk_5-input"
  >
    <h1>Block 5</h1>
    <input class="w-36 text-black font-normal pl-2" />
  </section>
  <section
    class="text-white text-lg font-bold flex flex-row flex-wrap justify-center items-center gap-2 sm:gap-4"
    id="blk_6-input"
  >
    <h1>Block 6</h1>
    <input class="w-36 text-black font-normal pl-2" />
  </section>
  <section
    class="text-white text-lg font-bold flex flex-row flex-wrap justify-center items-center gap-2 sm:gap-4"
    id="blk_7-input"
  >
    <h1>Block 7</h1>
    <input class="w-36 text-black font-normal pl-2" />
  </section>

  <div class="flex justify-center flex-row items-center gap-2 h-fit">
    <button
      class="bg-light-primary text-white font-bold text-lg rounded-lg p-2 h-12 hidden"
      id="save">Save</button
    >
    <button
      class="bg-light-primary text-white font-bold text-sm sm:text-lg rounded-lg p-2 h-12 flex justify-center items-center"
      id="paste">Paste from Schoology</button
    >
    <button
      class="bg-light-primary text-white font-bold text-sm sm:text-lg rounded-lg p-2 h-12 flex justify-center items-center"
      id="purge">Purge Cache</button
    >
    <button
      class="bg-light-primary text-white font-bold text-sm sm:text-lg rounded-lg p-2 h-12 flex justify-center items-center relative"
      id="open_changelog"
    >
      View Changelog
      <div
        class="absolute rounded-full w-4 h-4 bg-red-500 -right-1 -bottom-1 animate-pulse hidden pointer-events-none"
        id="changelog_pulse"
      >
      </div>
    </button>
    <button
      class="bg-light-primary text-white font-bold text-sm sm:text-lg rounded-lg p-2 h-12 flex justify-center items-center pr-4 pl-4"
      id="account_settings"
    >
      <span class="material-symbols-rounded font-extrabold">account_circle</span
      >
    </button>
  </div>

  <div class="flex justify-center items-center flex-col gap-2">
    <!-- Create a drop down -->
    <div class="flex flex-row gap-2 flex-wrap items-center justify-center">
      <button
        class="bg-light-primary text-white p-2 rounded-lg"
        id="dynbackground">Disable Dynamic Background</button
      >
      <button
        class="bg-light-primary text-white p-2 rounded-lg"
        id="removeCustomTheme">Remove Custom Theme</button
      >
      <select
        class="bg-light-primary text-white p-2 rounded-lg"
        value="default"
        id="theme_select"
      >
        <option value="default">Default</option>
        <option value="dark">Dark</option>
        <option value="salesian">Original Schedulology</option>
        <option value="hotdog">Hot Dog Stand</option>
        <option value="purple">Purple</option>
        <option value="green">Green</option>
        <option value="cherry-blossom">Cherry Blossom</option>
        <option value="blurred-img">Blurred Image (custom)</option>
        <option value="turquoise">Turquoise</option>
        <option value="custom-1">Custom Theme 1</option>
        <option value="custom-2">Custom Theme 2</option>
        <option value="custom-3">Custom Theme 3</option>
      </select>
      <button
        class="bg-light-primary text-white p-2 rounded-lg hidden"
        id="theme">Change Theme</button
      >
      <button
        class="bg-light-primary text-white p-2 rounded-lg flex justify-center items-center"
        id="edit"
      >
        <span class="material-symbols-rounded"> edit</span>
      </button>
    </div>
  </div>

  <div
    class="hidden sm:flex justify-center items-center flex-row flex-wrap gap-2"
  >
    <h4
      id="branch_name"
      class="text-light-primary drop-shadow-lg -mt-1 font-mono"
    >
      master
    </h4>
    <h4 class="-mt-1 font-mono text-light-primary drop-shadow-lg">-</h4>
    <h4 class="-mt-1 font-mono text-light-primary drop-shadow-lg">
      "DynSchedule v1.6"
    </h4>
  </div>
</div>

<div
  class="z-10 fixed justify-center items-center flex md:backdrop-blur-lg w-screen h-screen hidden"
  id="paste_screen"
>
  <div
    class="w-full h-full md:w-5/12 md:h-5/6 shadow-xl animate-pop-in bg-slate-900 md:rounded-lg relative border-black/25 border-4"
  >
    <div
      class="w-[100.5%] h-16 backdrop-blur-sm absolute flex justify-start items-center bg-black/25"
    >
      <h1 class="font-mono pl-4 text-2xl text-true-white">
        üè´ Paste from Schoology
      </h1>
      <button
        class="ml-auto flex justify-center items-center h-fit"
        id="close_paste"
      >
        <span
          class="material-symbols-rounded hover:text-red-500 p-4 !text-true-white"
          style="font-size: 2em">close</span
        >
      </button>
    </div>

    <div
      class="overflow-y-auto h-full text-true-white pl-4 pr-4 pt-20 flex items-center flex-col gap-4"
    >
      <img
        src="./howtocopy.gif"
        alt="Open the Schoology Courses tab and type CTRL + A and CTRL + C. Then, type CTRL + V in the 'Paste Here' field."
        class="rounded-lg w-full"
      />
      <div class="flex flex-row gap-4 w-full justify-center items-center">
        <h1>Paste Here:</h1>
        <textarea class="text-black resize-none" id="pasted_text"></textarea>
      </div>

      <button
        class="bg-[#1c2b50] text-white text-lg rounded-lg h-8 w-24 font-bold"
        id="paste_confirm">Confirm</button
      >
    </div>
  </div>
</div>
<AccountManagement />

<script defer>
  const runningInIframe = window.location !== window.parent.location;
  if (runningInIframe) {
    document.getElementById("edit").style.display = "none";
    document.querySelector("#settings_cog").innerHTML = `
        <span class='material-symbols-rounded w-full h-full top-1 relative'>
          open_in_new
        </span>
      `;
  }
  let isInDev = document.getElementById("isInDev").dataset.inDev === "true";
  if (isInDev) {
    document.getElementById("branch_name").innerHTML = "dev (local)";
  } else if (window.location.href.includes("dev")) {
    document.getElementById("branch_name").innerHTML = "dev";
  } else {
    document.getElementById("branch_name").innerHTML = "master";
  }

  function setHTML() {
    document.getElementById("blk_1-input").children[1].value =
      localStorage.getItem("blk_1") || "Block 1";
    document.getElementById("blk_2-input").children[1].value =
      localStorage.getItem("blk_2") || "Block 2";
    document.getElementById("blk_3-input").children[1].value =
      localStorage.getItem("blk_3") || "Block 3";
    document.getElementById("blk_4-input").children[1].value =
      localStorage.getItem("blk_4") || "Block 4";
    document.getElementById("blk_5-input").children[1].value =
      localStorage.getItem("blk_5") || "Block 5";
    document.getElementById("blk_6-input").children[1].value =
      localStorage.getItem("blk_6") || "Block 6";
    document.getElementById("blk_7-input").children[1].value =
      localStorage.getItem("blk_7") || "Block 7";

    document.getElementById("dynbackground").textContent =
      localStorage.getItem("dynamic_theme") === "true" ||
      !localStorage.getItem("dynamic_theme")
        ? "Disable Adaptive Background"
        : "Enable Adaptive Background";
    document.getElementById("theme_select").value =
      localStorage.getItem("theme") || "default";
  }

  setHTML();
  document.addEventListener("login:update", () => setHTML());

  document.getElementById("open_changelog").addEventListener("click", () => {
    document.getElementById("changelog").classList.remove("hidden");
  });
  document.getElementById("dynbackground").addEventListener("click", () => {
    const dynbackground = document.getElementById("dynbackground");
    if (dynbackground.textContent === "Disable Adaptive Background") {
      dynbackground.textContent = "Enable Adaptive Background";
      localStorage.setItem("dynamic_theme", "false");
    } else {
      dynbackground.textContent = "Disable Adaptive Background";
      localStorage.setItem("dynamic_theme", "true");
    }
    window.location.reload();
  });

  document.getElementById("theme").addEventListener("click", () => {
    const theme_select = document.getElementById("theme_select");
    localStorage.setItem("theme", theme_select.value);
    document.dispatchEvent(new CustomEvent("refreshTheme"));
  });

  document.getElementById("theme_select").addEventListener("change", () => {
    const theme_select = document.getElementById("theme_select");
    localStorage.setItem("theme", theme_select.value);
    document.dispatchEvent(new Event("login:sync"));
    document.dispatchEvent(new CustomEvent("refreshTheme"));
  });

  document.getElementById("purge").addEventListener("click", () => {
    sessionStorage.clear();
    localStorage.removeItem("changelog");
    window.location.reload();
  });

  function toggleSettings() {
    if (runningInIframe) {
      window.open(window.location.href, "_blank");
      return;
    }
    const settings = document.getElementById("settings");
    const mainschedule = document.getElementById("main_schedule");
    const cogsvg = document.getElementById("cog_svg");
    if (!settings.classList.contains("hidden")) {
      mainschedule.classList.remove("hidden");
      cogsvg.src = "/settings.svg";
      cogsvg.alt = "‚öôÔ∏è";
      settings.classList.add("hidden");
    } else {
      mainschedule.classList.add("hidden");

      cogsvg.src = "/close.svg";
      cogsvg.alt = "‚ùå";
      settings.classList.remove("hidden");
    }
  }

  document.getElementById("paste").addEventListener("click", () => {
    const paste_screen = document.getElementById("paste_screen");
    paste_screen.classList.remove("hidden");
  });

  document.getElementById("paste_confirm").addEventListener("click", () => {
    /**
     * @type {string}
     */
    const pasted_text = document.getElementById("pasted_text").value;
    let regex_pasted = /(.*)\nBlock (\d)/g;
    let result;
    pasted_text.match(regex_pasted).forEach((match) => {
      let match_found = match.split("\n");
      let block = match_found[1].split(" ")[1];
      let block_name = match_found[0];
      document.getElementById(`blk_${block}-input`).children[1].value =
        block_name;
      localStorage.setItem(`blk_${block}`, block_name);
    });

    document.dispatchEvent(new Event("login:sync"));
    const paste_screen = document.getElementById("paste_screen");
    paste_screen.classList.add("hidden");
    document.getElementById("classes").innerHTML = "";
    setTimeout(() => {
      document.dispatchEvent(
        new CustomEvent("refreshTheme", { detail: { disallowRefresh: true } })
      );
    }, 100);
  });

  document.getElementById("close_paste").addEventListener("click", () => {
    const paste_screen = document.getElementById("paste_screen");
    paste_screen.classList.add("hidden");
  });

  document.getElementById("save").addEventListener("click", () => {
    const blk_1 = document.getElementById("blk_1-input").children[1].value;
    const blk_2 = document.getElementById("blk_2-input").children[1].value;
    const blk_3 = document.getElementById("blk_3-input").children[1].value;
    const blk_4 = document.getElementById("blk_4-input").children[1].value;
    const blk_5 = document.getElementById("blk_5-input").children[1].value;
    const blk_6 = document.getElementById("blk_6-input").children[1].value;
    const blk_7 = document.getElementById("blk_7-input").children[1].value;

    localStorage.setItem("blk_1", blk_1);
    localStorage.setItem("blk_2", blk_2);
    localStorage.setItem("blk_3", blk_3);
    localStorage.setItem("blk_4", blk_4);
    localStorage.setItem("blk_5", blk_5);
    localStorage.setItem("blk_6", blk_6);
    localStorage.setItem("blk_7", blk_7);

    toggleSettings();
    document.getElementById("classes").innerHTML = "";
  });

  document
    .getElementById("settings_cog")
    .addEventListener("click", toggleSettings);

  const mq = window.matchMedia("(max-width: 760px)");
  if (mq.matches) {
    let themeSelected = localStorage.getItem("theme") || "default";
    let editorButton = document.getElementById("edit");
    document.getElementById("paste").classList.add("hidden");
    editorButton.id = "preventTheme2";
    editorButton.classList.remove("flex");
    editorButton.classList.add("hidden");
    document.getElementById("preventTheme2").addEventListener("click", () => {
      if (localStorage.getItem(`editorThemeClear.${themeSelected}`)) {
        localStorage.removeItem(`editorThemeClear.${themeSelected}`);
        location.reload();
        return;
      }
      let allowed = confirm(
        "Are you sure you want to prevent this theme from applying?\n" +
          "‚û°Ô∏è This will give you an empty slate, essentially making the current theme applied be the default theme.\n" +
          "‚û°Ô∏è This will allow you to make as many edits to the theme as you like.\n" +
          "‚û°Ô∏è You can undo this by clicking the button again."
      );
      if (!allowed) return;

      localStorage.setItem(`editorThemeClear.${themeSelected}`, "true");
      location.reload();
    });
    document.getElementById("preventTheme2").textContent = localStorage.getItem(
      `editorThemeClear.${themeSelected}`
    )
      ? "Enable Theme"
      : "Disable Theme";
  } else {
    document.getElementById("edit").classList.remove("hidden");
  }
  if (document.getElementById("edit"))
    document.getElementById("edit").addEventListener("click", () => {
      if (document.querySelector("#preview_menu").style.display !== "none") {
        alert("Please close the preview menu before editing the theme.");
        return;
      }
      const themeEditor = document.getElementById("themeEditor");
      if (themeEditor.style.display === "block") {
        return;
      }
      themeEditor.style.display = "block";
      themeEditor.animate(
        [{ transform: "translateX(-100%)" }, { transform: "translateX(0)" }],
        {
          duration: 500,
          easing: "ease-in-out",
          fill: "forwards",
        }
      );

      document
        .getElementById("schedule_page")
        .animate([{ marginLeft: "-33.33%" }, { marginLeft: "0" }], {
          duration: 500,
          easing: "ease-in-out",
          fill: "forwards",
        });

      setTimeout(() => {
        themeEditor.style.display = "block";
        document
          .getElementById("schedule_page")
          .animate([{ marginLeft: "0" }], {
            duration: 0,
            fill: "forwards",
          });
      }, 500);
    });

  document.getElementById("removeCustomTheme").addEventListener("click", () => {
    let themeSelected = localStorage.getItem("theme") || "default";
    localStorage.removeItem(`savedEditor.${themeSelected}`);
    location.reload();
  });
  document.getElementById("account_settings").addEventListener("click", () => {
    document.getElementById("manage_account").classList.remove("hidden");
  });
  // for each input in the children of the settings div, add an event listener to the change event
  for (const child of document.getElementById("settings").children) {
    if (child.nodeName === "SECTION") {
      child.children[1].addEventListener("change", () => {
        let block = child.children[0].innerHTML.split(" ")[1];
        localStorage.setItem(`blk_${block}`, child.children[1].value);
        document.getElementById("classes").innerHTML = "";
        // refresh the theme using the refreshTheme custom event
        setTimeout(() => {
          console.log("refreshing theme");
          document.dispatchEvent(new Event("login:sync"));
          document.dispatchEvent(
            new CustomEvent("refreshTheme", {
              detail: { disallowRefresh: true },
            })
          );
        }, 100);
      });
    }
  }
</script>
