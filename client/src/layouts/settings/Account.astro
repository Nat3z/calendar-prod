---
import { Image } from "astro:assets"
import GoogleLogo from "../../lib/google_logo.png"
---
<div class="screen_account w-full">
  <div class="overflow-y-auto h-full text-true-white pl-4 pr-4 pt-20 flex items-center flex-col gap-4 w-full">
    <div id="not_loggedin" style="display: none;" class="justify-center items-center flex flex-col gap-2">
      <button class="rounded-lg p-2 pl-4 pr-4 flex justify-start items-center gap-2 flex-row bg-white hover:bg-white/90 text-black shadow-lg" id="go_login">
        <Image src={GoogleLogo} alt="Google Logo" class="w-8 h-8" />
        <h1 class="text-lg font-semibold -mt-1">Login with Google</h1>
      </button>
      <p class="text-gray-400">
        By logging in, you agree to our
        <a href="https://github.com/Nat3z/calendar-prod/wiki/Privacy-Policy" class="text-center underline text-purple-600">Privacy Policy</a>
      </p>
    </div>

    <div id="loggedin" class="flex flex-col gap-2" style="display: none;">
      <div class="w-full">
        <h1 class="text-slate-500 text-center">Logged in as <span id="user_email"></span></h1>
      </div>
      <div class="account_actions flex flex-col md:flex-row text-xl gap-2 justify-center items-center w-full">
        <button id="pull_account" class="bg-green-700 hover:active:bg-green-800 hover:bg-green-600">
          <span class="material-symbols-outlined">cloud_download</span>
          Download 
        </button>
        <button id="sync_account" class="bg-blue-700 hover:active:bg-blue-800 hover:bg-blue-600">
          <span class="material-symbols-outlined">cloud_upload</span>
          Upload 
        </button>
        <button id="logout_account" class="bg-red-700 hover:active:bg-red-800 hover:bg-red-600">
          <span class="material-symbols-outlined">logout</span>
          Logout
        </button>
      </div>
    </div>
  </div>
</div>



<script>
  import { getAuth, GoogleAuthProvider, signInWithPopup, type User } from "firebase/auth";
  import { initializeApp } from "firebase/app";
  import { getDatabase, set, ref, get, goOffline, goOnline } from "firebase/database";
  import { animateNotif } from "../../lib/helpers";
  import moment from "moment";
  const firebaseConfig = {
    apiKey: "AIzaSyCWBTTV9qu7tzlKeYOSrcj9bzM8ndY6DI4",
    authDomain: "dynschedule-login.firebaseapp.com",
    databaseURL: "https://dynschedule-login-default-rtdb.firebaseio.com",
    projectId: "dynschedule-login",
    storageBucket: "dynschedule-login.appspot.com",
    messagingSenderId: "158062505462",
    appId: "1:158062505462:web:e6f1bbf5415593a2c86bd7"
  };

  document.getElementById("sync_account")!.addEventListener("click", () => {
    console.log("Sync event triggered.");
    animateNotif(
      "Uploading to cloud...",
      document.querySelector("#refresh_notif")! as HTMLElement
    );
    document.dispatchEvent(new Event("login:sync"));
  });

  document.addEventListener("login:sync", async () => {
    console.log("Syncing...");
    const user = auth.currentUser;
    if (user) {
      // clone localStorage
      const localStorageExcluded = {...localStorage};
      delete localStorageExcluded["changelog"];
      // check all themes and make sure that they don't exceed the 10mb limit
      for (const key in localStorageExcluded) {
        if (localStorageExcluded[key].length > 10000000) {
          console.log("Theme " + key + " exceeds the 10mb limit. Deleting from sync.");
          delete localStorageExcluded[key];
        }
      }

      goOnline(realtime);
      await set(ref(realtime, 'accounts/' + user.uid), 
        {
          data: JSON.stringify(localStorageExcluded),
          lastSynced: moment().unix()
        }
      );
      goOffline(realtime);

      console.log("%cUpload successful.", "color: green; font-weight: bold;");

      animateNotif(
        "Upload successful.",
        document.querySelector("#autosave_update")! as HTMLElement
      );
    } else {
      console.log("User not logged in.");
    }
  });

  document.getElementById("logout_account")!.addEventListener("click", () => {
    console.log("Logout event triggered.");
    auth.signOut()
      .then(() => {
        console.log("Logged out successfully.");
        document.getElementById("loggedin")!.style.display = "none";
        document.getElementById("not_loggedin")!.style.display = "flex";
      })
      .catch(() => console.error("Errored when logging out."))
  });

  document.getElementById("go_login")!.addEventListener("click", () => {
    console.log("Login event triggered.");
    signInWithPopup(auth, googleAuth)
      .then((result) => {
        const user = result.user;
        auth.updateCurrentUser(user);
      })
    .catch(() => console.error("Errored when logging in."))
  })

  document.getElementById("pull_account")!.addEventListener("click", () => {
    console.log("Pull event triggered.");
    animateNotif(
      "Downloading from cloud...",
      document.querySelector("#refresh_notif")! as HTMLElement
    );

    const user = auth.currentUser;
    if (user) {
      pull(user);
    }
  });

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);

  const googleAuth = new GoogleAuthProvider();

  let realtime = getDatabase(app);
  goOffline(realtime);
  function pull(user: User) {
    goOnline(realtime);
    get(ref(realtime, 'accounts/' + user.uid)).then((snapshot) => {
      if (snapshot.exists()) {
        console.log("Syncing data...");
        const data = JSON.parse(snapshot.val().data);
        for (const key in data) {
          localStorage.setItem(key, data[key]);
        }
        console.log("%cSync successful.", "color: green; font-weight: bold;");
        localStorage.setItem("lastSynced", moment().unix().toString());
        document.dispatchEvent(new CustomEvent("refreshTheme"));
        document.dispatchEvent(new Event("login:update"))

        animateNotif(
          "Sync successful.",
          document.querySelector("#autosave_update")! as HTMLElement
        );
        goOffline(realtime);
      } else {
        document.dispatchEvent(new Event("login:sync"));
        console.log("No data found.");
      }
    }).catch((error) => {
      console.error(error);
    });
  }

  let loggedOut = false;
  document.getElementById("loggedin")!.style.display = "none";
  document.getElementById("not_loggedin")!.style.display = "none";
  auth.onAuthStateChanged((user) => {
    if (user) {
      console.log("User is logged in.");
      document.getElementById("loggedin")!.style.display = "flex";
      document.getElementById("not_loggedin")!.style.display = "none";
      document.getElementById("user_email")!.textContent = user.email;
      if (!loggedOut && localStorage.getItem("lastSynced") && moment().unix() - parseInt(localStorage.getItem("lastSynced")!) < 60) {
        console.log("Synced within the 1 minute. Skipping pull.");
        return;
      }
      // sync database
      pull(user)
    } else {
      loggedOut = true;
      console.log("User is not logged in.");
      document.getElementById("not_loggedin")!.style.display = "flex";
      document.getElementById("loggedin")!.style.display = "none";
    }
  });

  document.addEventListener("visibilitychange", (event) => {
    if (document.visibilityState === "visible") return;

    if (localStorage.getItem("lastSynced") && moment().unix() - parseInt(localStorage.getItem("lastSynced")!) < 60) {
      console.log("Synced within the 1 minute. Skipping pull.");
      return;
    }
    if (auth.currentUser)
      pull(auth.currentUser!);
  });
</script>

<script>
(document.querySelector(".screen_account") as HTMLElement).style.display = "none";
document.addEventListener("screen:change", (e) => {
  let newScreen = (e as CustomEvent).detail as string;
  if (newScreen == "account") {
    (document.querySelector(".screen_account") as HTMLElement).style.display = "flex";
  }
  else {
    (document.querySelector(".screen_account") as HTMLElement).style.display = "none";
  }
})
</script>

<style>
  .account_actions {
    button {
      @apply rounded-lg p-2 pl-4 pr-4 text-lg flex flex-row justify-center items-center gap-2 font-semibold w-full max-w-64;
    }
  }
</style>
